# Write the given string to stdout and append a newline
#  - r0: The string (array with length) to write
writeln:
	set	r1,1		# stdout
	loadl	r3,r0		# Load the length
	set	r4,8
	add	r2,r0,r4	# Point to the string
	set	r0,1		# SYSCALL_write
	syscall
	set	r0,1		# SYSCALL_write
	#set	r1,1		# stdout
	set	r3,1		# 1 byte
	set	r2,.newline	# newline
	syscall
	set	r0,0		# :D
	ret

# Temporary thing to print numbers
writeln_num:
	# Allocate temporary buffer
	mov	r30,r31
	set	r1,64
	add	r31,r31,r1
	mov	r2,r31
	# Parse number
	set	r10,10	# The base (decimal)
	set	r11,0	# The length
	set	r12,1	# To decrease r2 and increase r11
	set	r13,48	# '0'
.loop0:
	mod	r20,r0,r10
	add	r20,r20,r13
	storeb	r20,r2
	add	r11,r11,r12
	sub	r2,r2,r12
	div	r0,r0,r10
	jnz	.loop0,r0
	# Store length
	set	r0,7
	sub	r2,r2,r0
	storel	r11,r2
	# Print the line
	mov	r0,r2
	call	writeln
	# Restore stack pointer
	mov	r31,r30
	ret

.newline:	.byte 10
